# Configuration for building a coreboot ROM that works in the.
# the qemu emulator.  Note that the TPM does not work, so this
# will just drop into the recovery shell.
export CONFIG_LINUXBOOT=n
export CONFIG_COREBOOT=n
#CONFIG_LINUXBOOT_BOARD=qemu
CONFIG_LINUX_CONFIG=config/linux-tiny.config

# Use the qboot BIOS for faster startup
CONFIG_QBOOT=y

ifeq "$(CONFIG_UROOT)" "y"
CONFIG_BUSYBOX=n
else
CONFIG_KEXEC=y
CONFIG_QRENCODE=n
CONFIG_TPMTOTP=n
CONFIG_POPT=n
CONFIG_FLASHTOOLS=n
CONFIG_FLASHROM=n
CONFIG_PCIUTILS=y
CONFIG_UTIL_LINUX=y
CONFIG_CRYPTSETUP=y
CONFIG_GPG2=n
CONFIG_LVM2=y
CONFIG_MBEDTLS=y
CONFIG_DROPBEAR=y
CONFIG_NEWT=n
CONFIG_SLANG=n
endif

CONFIG_LINUX_ATA=n
CONFIG_LINUX_AHCI=n
CONFIG_LINUX_USB=n
CONFIG_LINUX_E1000=n

export CONFIG_BOOTSCRIPT=/bin/tiny-init
export CONFIG_TPM=n

#run: coreboot.intermediate
run: $(build)/$(BOARD)/initrd.cpio
	-qemu-system-x86_64 \
		--machine q35 \
		--serial /dev/tty \
		--device virtio-net,netdev=net0 \
		--netdev user,id=net0,hostfwd=tcp::5555-:22 \
		--bios $(build)/qboot-git/bios.bin \
		--kernel $(build)/$(BOARD)/bzImage \
		--initrd $(build)/$(BOARD)/initrd.cpio
	stty sane

$(build)/$(BOARD)/initrd.cpio: $(build)/$(BOARD)/initrd.cpio.xz
	xzcat $< > $@
